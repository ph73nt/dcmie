/*
 * Copyright (C) 2002 Thomas Hacklaender, mailto:hacklaender@iftm.de
 *
 * IFTM Institut fuer Telematik in der Medizin GmbH, www.iftm.de
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU  General Public License as published by the 
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * http://www.gnu.org/copyleft/copyleft.html
 */
package de.iftm.dcm4che.dcmie.imp;

import java.io.*;
import java.util.*;
import javax.swing.table.*;

import org.dcm4che.data.*;
import org.dcm4che.dict.*;

import de.iftm.dcm4che.dcmie.*;


/**
 * Liefert eine Info Tabelle zu einem DICOM File:
 * - Beispiel fuer einen DICOMDIR File in PS 3.10 - Annex A
 * - Basic Directory IOD (Information Object Definition) in PS 3.3 - Annex F
 * @author   Thomas Hacklaender
 * @version  2002.5.19
 */
public class FileInfoPanel extends javax.swing.JPanel implements java.io.Serializable {

  // Das Dataset, das als Info dargestellt werden soll
  private Dataset         ds = null;
  
  // Das Dictionary der Tags
  private TagDictionary   dict = null;
  
  
  /** Creates new form DcmInfoPanel */
  public FileInfoPanel() {
    initComponents();
  }
  
  
  /**
   * Set up the Panel
   */
  public void setUp(DcmieParam dcmieParam) {
    dict = DictionaryFactory.getInstance().getDefaultTagDictionary();
    ds = DcmObjectFactory.getInstance().newDataset();
  }
  
  
  /**
   * Set a new input source.
   * @param f the input source.
   */
  public void setInput(File f) {
    // Inhalt loeschen
    removeAllRows();
    
    // Wenn File nicht gesetzt nichts tun
    if (f == null) return;
    
    try {
      InputStream in = new BufferedInputStream(new FileInputStream(f));
      DcmParser p = DcmParserFactory.getInstance().newDcmParser(in);
      FileFormat ff = p.detectFileFormat();
      ds.readFile(in, ff, -1);
      addInfo();
      in.close();
    } catch (Exception e) {
      ((DefaultTableModel) infoTable.getModel()).addRow(new String [] {"No DICOM file selected", ""});
    }
    
   }
  
  
  /**
   * Adds the info data.
   */
  private void addInfo() {
    addInfoRow(Tags.PatientName);
    addInfoRow(Tags.StudyID);
    addInfoRow(Tags.SeriesNumber);
    addInfoRow(Tags.InstanceNumber);  // Frueher ImageNumber
    
    ((DefaultTableModel) infoTable.getModel()).addRow(new String [] {"", ""});
    
    addInfoRow(Tags.Rows);
    addInfoRow(Tags.Columns);
    addInfoRow(Tags.PhotometricInterpretation);
    
    ((DefaultTableModel) infoTable.getModel()).addRow(new String [] {"", ""});
    
    for (Iterator i = ds.iterator(); i.hasNext(); ) {
      try {
        addInfoRow(((DcmElement) i.next()).tag());
      } catch (Exception e) {}
    }
    
  }
  
  
  /**
   * Adds the singel info row.
   */
  private void addInfoRow(int tag) {
    try {
      ((DefaultTableModel) infoTable.getModel()).addRow(new String [] {dict.lookup(tag).name, ds.getString(tag)});
    } catch (Exception e) {
    }
  }
  
  
  /**
   * Removes all data.
   */
  private void removeAllRows() {    
    while (infoTable.getModel().getRowCount() > 0) {
      ((DefaultTableModel) infoTable.getModel()).removeRow(0);
    }
  }

  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    scroll = new javax.swing.JScrollPane();
    infoTable = new javax.swing.JTable();

    setLayout(new java.awt.BorderLayout());

    scroll.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    scroll.setMinimumSize(new java.awt.Dimension(256, 64));
    scroll.setPreferredSize(new java.awt.Dimension(0, 0));
    infoTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "DICOM Tag", "Value"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean [] {
        false, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    infoTable.setName("null");
    scroll.setViewportView(infoTable);

    add(scroll, java.awt.BorderLayout.CENTER);

  }//GEN-END:initComponents
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane scroll;
  private javax.swing.JTable infoTable;
  // End of variables declaration//GEN-END:variables
  
}
